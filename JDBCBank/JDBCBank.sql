-- AMBIORIX CRUZ ANGELES
-- JDBCBANK FOR PROJECT 0

-- DROPPING TABLES IF THEY ALREADY EXISTS
DROP TABLE TABLE_BANK_ACCOUNTS;
/
DROP TABLE TABLE_USERS;
/
-- CREATING NEW TABLES
CREATE TABLE TABLE_USERS (
    USER_ID INTEGER PRIMARY KEY, -- PRIMARY KEY
    USER_USERNAME VARCHAR2(20), -- USERNAME USED TO LOG IN
    USER_PASSWORD VARCHAR2(20), -- PASSWORD USED TO LOG IN
    USER_FIRSTNAME VARCHAR2(20), -- FIRST NAME
    USER_LASTNAME VARCHAR2(20) -- LAST NAME
    -- USER_IS_SUPER CHAR(1) CHECK (USER_IS_SUPER IN ('Y', 'N'))
);
/
CREATE TABLE TABLE_BANK_ACCOUNTS (
    BANK_ACCOUNT_ID INTEGER PRIMARY KEY, -- PRIMARY KEY
    BANK_ACCOUNT_NAME VARCHAR2(20), -- ACCOUNT NAME: EXAMPLE BANK NAME
    BANK_ACCOUNT_BALANCE NUMBER(8,2), -- BALANCE MAX IS 999999.99
    USER_ID INTEGER REFERENCES TABLE_USERS(USER_ID) -- FOREIGN KEY TO TABLE_USERS
);
/
-- AUTO GENERATED PRIMARY KEYS
DROP SEQUENCE TABLE_USERS_SEQUENCE;
/
CREATE SEQUENCE TABLE_USERS_SEQUENCE
MINVALUE 1
MAXVALUE 1000
START WITH 1
INCREMENT BY 1;
/
DROP SEQUENCE TABLE_BANK_ACCOUNTS_SEQUENCE;
/
CREATE SEQUENCE TABLE_BANK_ACCOUNTS_SEQUENCE
MINVALUE 1
MAXVALUE 1000
START WITH 1
INCREMENT BY 1;
/
-- INSERTING SOME DUMMY DATA INTO TABLES
INSERT INTO TABLE_USERS(USER_ID, USER_USERNAME, USER_PASSWORD, USER_FIRSTNAME, USER_LASTNAME) --, USER_IS_SUPER)
VALUES(TABLE_USERS_SEQUENCE.NEXTVAL, 'REX13', 'REXPASS', 'REX', 'CRUZ'); --, 'Y');
/
INSERT INTO TABLE_USERS(USER_ID, USER_USERNAME, USER_PASSWORD, USER_FIRSTNAME, USER_LASTNAME) --, USER_IS_SUPER)
VALUES(TABLE_USERS_SEQUENCE.NEXTVAL,'BILLY5', 'MONEYBILLS', 'BILLY', 'SANCHES'); --, 'N');
/
INSERT INTO TABLE_USERS(USER_ID, USER_USERNAME, USER_PASSWORD, USER_FIRSTNAME, USER_LASTNAME) --, USER_IS_SUPER)
VALUES(TABLE_USERS_SEQUENCE.NEXTVAL,'BOB32', 'BOBSBURGERS', 'BOB', 'NUNEZ'); --, 'N');
/
INSERT INTO TABLE_USERS(USER_ID, USER_USERNAME, USER_PASSWORD, USER_FIRSTNAME, USER_LASTNAME) --, USER_IS_SUPER)
VALUES(TABLE_USERS_SEQUENCE.NEXTVAL,'BERT232', 'CRAZYPASS', 'BERT', 'CRAZY'); --, 'N');
/
INSERT INTO TABLE_BANK_ACCOUNTS(BANK_ACCOUNT_ID, BANK_ACCOUNT_NAME, BANK_ACCOUNT_BALANCE, USER_ID)
VALUES(TABLE_BANK_ACCOUNTS_SEQUENCE.NEXTVAL, 'CHASE', 8329, 1);
/
INSERT INTO TABLE_BANK_ACCOUNTS(BANK_ACCOUNT_ID, BANK_ACCOUNT_NAME, BANK_ACCOUNT_BALANCE, USER_ID)
VALUES(TABLE_BANK_ACCOUNTS_SEQUENCE.NEXTVAL, 'AMEX', 4321, 1);
/
INSERT INTO TABLE_BANK_ACCOUNTS(BANK_ACCOUNT_ID, BANK_ACCOUNT_NAME, BANK_ACCOUNT_BALANCE, USER_ID)
VALUES(TABLE_BANK_ACCOUNTS_SEQUENCE.NEXTVAL, 'WELLS', 5467, 2);
/
INSERT INTO TABLE_BANK_ACCOUNTS(BANK_ACCOUNT_ID, BANK_ACCOUNT_NAME, BANK_ACCOUNT_BALANCE, USER_ID)
VALUES(TABLE_BANK_ACCOUNTS_SEQUENCE.NEXTVAL, 'CHASE', 6959, 2);
/
INSERT INTO TABLE_BANK_ACCOUNTS(BANK_ACCOUNT_ID, BANK_ACCOUNT_NAME, BANK_ACCOUNT_BALANCE, USER_ID)
VALUES(TABLE_BANK_ACCOUNTS_SEQUENCE.NEXTVAL, 'CAPITAL', 202, 2);
/
INSERT INTO TABLE_BANK_ACCOUNTS(BANK_ACCOUNT_ID, BANK_ACCOUNT_NAME, BANK_ACCOUNT_BALANCE, USER_ID)
VALUES(TABLE_BANK_ACCOUNTS_SEQUENCE.NEXTVAL, 'AMEX', 10291, 3);
/
INSERT INTO TABLE_BANK_ACCOUNTS(BANK_ACCOUNT_ID, BANK_ACCOUNT_NAME, BANK_ACCOUNT_BALANCE, USER_ID)
VALUES(TABLE_BANK_ACCOUNTS_SEQUENCE.NEXTVAL, 'WELLS', 6394, 3);
/
INSERT INTO TABLE_BANK_ACCOUNTS(BANK_ACCOUNT_ID, BANK_ACCOUNT_NAME, BANK_ACCOUNT_BALANCE, USER_ID)
VALUES(TABLE_BANK_ACCOUNTS_SEQUENCE.NEXTVAL, 'AMEX', 3422, 3);
/
-- PROCEDURE FOR INSERTING NEW USER
CREATE OR REPLACE PROCEDURE TABLE_USERS_INSERT
(USER_UN IN VARCHAR2, USER_P IN VARCHAR2, USER_FN IN VARCHAR2, USER_LN IN VARCHAR2) --, USER_I_S IN CHAR)
AS
BEGIN
    INSERT INTO TABLE_USERS
    VALUES(TABLE_USERS_SEQUENCE.NEXTVAL, USER_UN, USER_P, USER_FN, USER_LN); --, USER_I_S);
    COMMIT;
END;
/
-- PROCEDURE FOR INSERTING NEW ACCOUNT
CREATE OR REPLACE PROCEDURE TABLE_BANK_ACCOUNTS_INSERT
(BANK_A_N IN VARCHAR2, BANK_A_B IN NUMBER, USER_ID IN INTEGER)
AS
BEGIN
    INSERT INTO TABLE_BANK_ACCOUNTS
    VALUES(TABLE_BANK_ACCOUNTS_SEQUENCE.NEXTVAL, BANK_A_N, BANK_A_B, USER_ID);
    COMMIT;
END;
/
-- PROCEDURE FOR DELETING A USER
CREATE OR REPLACE PROCEDURE TABLE_USERS_DELETE(USERID IN INTEGER)
AS
BEGIN
    DELETE FROM TABLE_BANK_ACCOUNTS WHERE USER_ID = USERID;
    DELETE FROM TABLE_USERS WHERE USER_ID = USERID;
    COMMIT;
END;
/
-- PROCEDURE FOR DELETING A BANK ACCOUNT
CREATE OR REPLACE PROCEDURE TABLE_BANK_ACCOUNTS_DELETE(BANKACCOUNTID IN INTEGER)
AS
BEGIN
    DELETE FROM TABLE_BANK_ACCOUNTS WHERE BANK_ACCOUNT_ID = BANKACCOUNTID;
    COMMIT;
END;
/