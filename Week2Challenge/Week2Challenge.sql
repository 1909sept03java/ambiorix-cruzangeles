-- WEEK 2 CODING CHALLENGE FOR AMBIORIX CRUZ ANGELES

-- CREATE TABLE EMPLOYEE AND DEPARTMENT
CREATE TABLE EMPLOYEE (
    EMPLOYEE_ID INTEGER PRIMARY KEY,
    EMP_FIRSTNAME VARCHAR2(20), --20 CHARACTERS OF SPACE
    EMP_LASTNAME VARCHAR2(20), --20 CHARACTERS OF SPACE
    DEPARTMENT_ID INTEGER, -- MAKING THIS A FOREIGN KEY FOR DEPARTMENT TABLE
    SALARY NUMBER(6, 2),
    EMP_EMAIL VARCHAR2(20) -- 20 CHARACTERS OF SPACE
);
/

CREATE TABLE DEPARTMENT (
    DEPARTMENT_ID INTEGER PRIMARY KEY,
    DEPARTMENT_NAME VARCHAR2(20)
);
/

-- A NEW WAY OF CREATING AUTO GENERATING KEYS (NOT USED IN THIS EXAMPLE)

DROP TABLE DEPARTMENT;
/

DROP TABLE EMPLOYEE;
/

CREATE TABLE DEPARTMENT (
    DEPARTMENT_ID NUMBER GENERATED ALWAYS AS IDENTITY,
    DEPARTMENT_NAME VARCHAR2(20)
);
/

-- CREATING SEQUENCES AND TRIGGERS FOR AUTO INCREMENTED VALUES

CREATE SEQUENCE EMPLOYEE_SEQUENCE;
/

CREATE OR REPLACE TRIGGER EMPLOYEE_ON_INSERT
  BEFORE INSERT ON EMPLOYEE
  FOR EACH ROW
BEGIN
  SELECT EMPLOYEE_SEQUENCE.NEXTVAL
  INTO :NEW.EMPLOYEE_ID
  FROM DUAL;
END;
/

CREATE SEQUENCE DEPARTMENT_SEQUENCE;
/

CREATE OR REPLACE TRIGGER DEPARTMENT_ON_INSERT
  BEFORE INSERT ON DEPARTMENT
  FOR EACH ROW
BEGIN
  SELECT DEPARTMENT_SEQUENCE.NEXTVAL
  INTO :NEW.DEPARTMENT_ID
  FROM DUAL;
END;
/

-- INSERTING SIX EMPLOYEES AND THREE DEPARTMENTS

-- INSERTING INTO DEPARTMENT
INSERT INTO DEPARTMENT(DEPARTMENT_NAME)
VALUES('MATH');
/
INSERT INTO DEPARTMENT(DEPARTMENT_NAME)
VALUES('CSC');
/
INSERT INTO DEPARTMENT(DEPARTMENT_NAME)
VALUES('CPE');
/

-- INSERTING INTO EMPLOYEE
INSERT INTO EMPLOYEE(EMP_FIRSTNAME, EMP_LASTNAME, DEPARTMENT_ID, SALARY, EMP_EMAIL)
VALUES('APPLE', 'APPLETON', 0, 1100, 'APPLTON@EMAIL.COM');
/
INSERT INTO EMPLOYEE(EMP_FIRSTNAME, EMP_LASTNAME, DEPARTMENT_ID, SALARY, EMP_EMAIL)
VALUES('BANANA', 'BANANATON', 0, 1300, 'BANANATON@EMAIL.COM');
/
INSERT INTO EMPLOYEE(EMP_FIRSTNAME, EMP_LASTNAME, DEPARTMENT_ID, SALARY, EMP_EMAIL)
VALUES('CUCUMBER', 'CUCUMBERTON', 1, 2000, 'CUCUMBER@EMAIL.COM');
/
INSERT INTO EMPLOYEE(EMP_FIRSTNAME, EMP_LASTNAME, DEPARTMENT_ID, SALARY, EMP_EMAIL)
VALUES('FIG', 'FIGTON', 1, 1800, 'FIGTON@EMAIL.COM');
/
INSERT INTO EMPLOYEE(EMP_FIRSTNAME, EMP_LASTNAME, DEPARTMENT_ID, SALARY, EMP_EMAIL)
VALUES('KIWI', 'KIWITON', 2, 2000, 'KIWITON@EMAIL.COM');
/
INSERT INTO EMPLOYEE(EMP_FIRSTNAME, EMP_LASTNAME, DEPARTMENT_ID, SALARY, EMP_EMAIL)
VALUES('GRAPE', 'GRAPETON', 2, 3000, 'GRAPETON@EMAIL.COM');
/

-- CREATING STORED PROCEDURES FOR DEPARTMENT SALARY RAISES

CREATE OR REPLACE PROCEDURE SP_GIVE_RAISE(DEPT_ID IN INTEGER, AVG_SAL OUT NUMBER, IS_ID_VALID OUT NUMBER)
IS
DEPT_EXISTS NUMBER;
BEGIN
    -- CHECKING TO SEE IF THE DEPARTMENT_ID EXISTS
    SELECT COUNT(DEPT_ID)
    INTO DEPT_EXISTS
    FROM DEPARTMENT
    WHERE DEPARTMENT_ID = DEPT_ID;
    --DBMS_OUTPUT.PUT_LINE(DEPT_EXISTS);
    
    -- IF IT EXISTS THEN UPDATE SALARY
    IF DEPT_EXISTS > 0 THEN
        UPDATE EMPLOYEE 
        SET SALARY = SALARY + (SALARY*0.1)
        WHERE DEPARTMENT_ID = DEPT_ID;
        -- GETTING THE AVERAGE SALARY FOR ALL EMPLOYEES IN THE SAME DEPARTMENT
        SELECT AVG(SALARY)
        INTO AVG_SAL
        FROM EMPLOYEE
        WHERE DEPARTMENT_ID = DEPT_ID;
    ELSE 
    AVG_SAL := 0;
    IS_ID_VALID := 0;
    END IF;
    COMMIT;
    
END;
/

